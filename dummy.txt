using LogisticsPlatform.ACL.Publish.Infrastructure.Options;
using LogisticsPlatform.Logger.Component;
using LogisticsPlatform.Reference.Location.Component.Platform.Version1_0.Models;
using LogisticsPlatform.Reference.Product.Component.Platform.Version1_0.Models;
using MongoDB.Bson;
using MongoDB.Bson.Serialization;
using MongoDB.Bson.Serialization.Serializers;

namespace LogisticsPlatform.ACL.Publish.Infrastructure;

[ExcludeFromCodeCoverage]
public static class DependencyInjection
{
    public static IServiceCollection ConfigureInfrastructure(this IServiceCollection services)
    {
        // Add Options
       
        services.ConfigureOptions<ConfigureAzureBlobSettings>();
        services.ConfigureOptions<ConfigureMongoDbSettings>();
        services.ConfigureAzureSettings();
        services.ConfigureKafkaSettings<KafkaSettings>();
        services.ConfigureMongoSettings<MongoDbSettings>();
        services.ConfigureOptions<ConfigureAppSettings>();

        services.AddSingleton<IDepotRepository, DepotRepository>();
        services.AddSingleton<ILocationRepository, LocationRepository>();
        services.AddSingleton<IProductRepository, ProductRepository>();
        services.AddSingleton<ISupplierGroupRepository, SupplierGroupRepository>();
        services.AddSingleton<IMasterSupplierGroupRepository, MasterSupplierGroupRepository>();
        // Add Azure
        services.AddAzureConnector();

        // Add Kafka
        services.AddKafka();

        // Add Logger
        services.AddCustomLogging();

        // Add Mongo
        services.AddMongoWithRepositories();

        BsonClassMap.RegisterClassMap<ProductPlatform>(map =>
        {
            map.AutoMap();
            map.IdMemberMap.SetSerializer(new StringSerializer(BsonType.ObjectId));
        });

        BsonClassMap.RegisterClassMap<LocationPlatform>(map =>
        {
            map.AutoMap();
            map.IdMemberMap.SetSerializer(new StringSerializer(BsonType.ObjectId));
        });

        return services;
    }
}

using LogisticsPlatform.ACL.Publish.Application.Mapper;
using LogisticsPlatform.ACL.Publish.Application.Processor;
using LogisticsPlatform.ACL.Publish.Application.Service;
using LogisticsPlatform.ACL.Publish.Application.Subscriber;
using LogisticsPlatform.ACL.Publish.Domain.Interfaces;
using LogisticsPlatform.Common.Extensions.Mongo.Services;

namespace LogisticsPlatform.ACL.Publish.Application;

[ExcludeFromCodeCoverage]
public static class DependencyInjection
{
    public static IServiceCollection ConfigureApplication(this IServiceCollection services)
    {
        services.AddSingleton<IFlatFileToClassConverter, FlatFileToClassConverter>();
        services.AddSingleton<ICSVToClassConverter, CSVToClassConverter>();

        services.AddSingleton<IDataMapper, DataMapper>();
        services.AddSingleton<IFileSubscriber, FileSubscriber>();
        services.AddSingleton<IFileProcessor, FileProcessor>();
        services.AddSingleton<IFileSequenceNumberRepository, FileSequenceNumberRepository>();

        services.AddHostedService<MongoIndexService>();
        services.AddHostedService<ReprocessService>();
        services.AddHostedService<FileService>();

        return services;
    }
}
namespace LogisticsPlatform.ACL.Publish.Infrastructure.Options;

[ExcludeFromCodeCoverage]
public class ConfigureAppSettings(IConfiguration configuration) : IConfigureOptions<AppSettings>
{
    public void Configure(AppSettings options)
    {
        configuration.Bind(options);

        options.CronScheduleExpression = Environment.GetEnvironmentVariable("CRON_SCHEDULE_EXPRESSION").IfEmpty(options.CronScheduleExpression);
        options.CronReprocessScheduleExpression = Environment.GetEnvironmentVariable("CRON_REPROCESS_SCHEDULE_EXPRESSION").IfEmpty(options.CronReprocessScheduleExpression);
        options.PostKafkaThreadCount = Convert.ToInt16(Environment.GetEnvironmentVariable("PUBLISH_KAFKA_THREAD_COUNT").IfEmpty(options.PostKafkaThreadCount.ToString()));
        options.MongoDownWaitTime = Convert.ToInt16(Environment.GetEnvironmentVariable("MONGO_DOWN_WAIT_TIME").IfEmpty(options.MongoDownWaitTime.ToString()));
        options.InterfaceId =Environment.GetEnvironmentVariable("INTERFACE_ID");
    }
}
namespace LogisticsPlatform.ACL.Publish.Infrastructure.Options;

[ExcludeFromCodeCoverage]
public class ConfigureAzureBlobSettings(IConfiguration configuration) : IConfigureOptions<AzureBlobSettings>
{
    public void Configure(AzureBlobSettings options)
    {
        configuration.Bind("Blob", options);

        if (!string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("BLOB__FILE_PREFIX")))
            options.FilePrefixList = [.. Environment.GetEnvironmentVariable("BLOB__FILE_PREFIX").Split(',', StringSplitOptions.RemoveEmptyEntries)];

        if (!string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("BLOB__CONNECTIONSTRING")))
            options.ConnectionString = Environment.GetEnvironmentVariable("BLOB__CONNECTIONSTRING");

        if (!string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("BLOB__CONTAINER")))
            options.Container =  Environment.GetEnvironmentVariable("BLOB__CONTAINER");

        if (!string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("BLOB__INTERFACEFOLDER")))
            options.InterfaceFolder = Environment.GetEnvironmentVariable("BLOB__INTERFACEFOLDER");
    }
}

using MongoDB.Driver;

namespace LogisticsPlatform.ACL.Publish.Infrastructure.Options
{
    public class ConfigureMongoDbSettings : IConfigureNamedOptions<MongoDbSettings>
    {
        private readonly IConfiguration _configuration;

        public ConfigureMongoDbSettings(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        public void Configure(string name, MongoDbSettings options)
        {
            _configuration.Bind(nameof(MongoDbSettings), options);

            if (name.Equals("Depot", StringComparison.OrdinalIgnoreCase))
            {
                options.ConnectionString = Environment.GetEnvironmentVariable("MONGO__DEPOT__CONNECTIONSTRING");
                options.DatabaseName = Environment.GetEnvironmentVariable("MONGO__DEPOT__DATABASENAME");
                options.CollectionName = Environment.GetEnvironmentVariable("MONGO__DEPOT__COLLECTIONNAME");
            }
            else if (name.Equals("Product", StringComparison.OrdinalIgnoreCase))
            {
                options.ConnectionString = Environment.GetEnvironmentVariable("MONGO__PRODUCT__CONNECTIONSTRING");
                options.DatabaseName = Environment.GetEnvironmentVariable("MONGO__PRODUCT__DATABASENAME");
                options.CollectionName = Environment.GetEnvironmentVariable("MONGO__PRODUCT__COLLECTIONNAME");
            }
            else if (name.Equals("Location", StringComparison.OrdinalIgnoreCase))
            {
                options.ConnectionString = Environment.GetEnvironmentVariable("MONGO__LOCATION__CONNECTIONSTRING");
                options.DatabaseName = Environment.GetEnvironmentVariable("MONGO__LOCATION__DATABASENAME");
                options.CollectionName = Environment.GetEnvironmentVariable("MONGO__LOCATION__COLLECTIONNAME");
            }
            else if (name.Equals("Supplier", StringComparison.OrdinalIgnoreCase))
            {
                options.ConnectionString = Environment.GetEnvironmentVariable("MONGO__SUPPLIER__CONNECTIONSTRING");
                options.DatabaseName = Environment.GetEnvironmentVariable("MONGO__SUPPLIER__DATABASENAME");
                options.CollectionName = Environment.GetEnvironmentVariable("MONGO__SUPPLIER__COLLECTIONNAME");
            }
            else if (name.Equals("MasterSupplier", StringComparison.OrdinalIgnoreCase))
            {
                options.ConnectionString = Environment.GetEnvironmentVariable("MONGO__MASTERSUPPLIER__CONNECTIONSTRING");
                options.DatabaseName = Environment.GetEnvironmentVariable("MONGO__MASTERSUPPLIER__DATABASENAME");
                options.CollectionName = Environment.GetEnvironmentVariable("MONGO__MASTERSUPPLIER__COLLECTIONNAME");
            }
            else
            {
                options.ConnectionString = Environment.GetEnvironmentVariable("MONGO__CONNECTIONSTRING");
                options.DatabaseName = Environment.GetEnvironmentVariable("MONGO__DATABASENAME");
            }
            options.MongoDownTime = Convert.ToInt16(Environment.GetEnvironmentVariable("MONGO_DOWN_WAIT_TIME").IfEmpty(options.MongoDownTime.ToString()));

            var clientSettings = MongoClientSettings.FromConnectionString(options.ConnectionString);
            clientSettings.MaxConnectionIdleTime = new TimeSpan(0, 0, 59);
            clientSettings.ServerSelectionTimeout = TimeSpan.FromSeconds(options.MongoDownTime);
            clientSettings.MaxConnectionPoolSize = 500;
            clientSettings.RetryReads = true;
            clientSettings.AllowInsecureTls = false;

            options.MongoClientSettings = clientSettings;
        }

        public void Configure(MongoDbSettings options) => Configure(string.Empty, options);
    }
}


using LogisticsPlatform.ACL.Publish.Application;
using LogisticsPlatform.ACL.Publish.Infrastructure;

HostApplicationBuilder builder = Host.CreateApplicationBuilder(args);

builder.Services
    .ConfigureInfrastructure()
    .ConfigureApplication();

await builder.Build().RunAsync();

[ExcludeFromCodeCoverage]
public static partial class Program { }
